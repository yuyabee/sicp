(define (scan-out-defines contents)
	(define (skip-null lst) (filter (lambda (v) (not (null? v))) lst))
	(define (local-vars contents)
		(let ((vars (skip-null
									(map (lambda (exp) 
												 (if (definition? exp)
													 (list (definition-variable exp)
																 '(quote *unassigned*))
													 '()))
											 contents))))
			(if (> (length vars) 0)
				(list 'let vars)
				null)))
	(define (init-vars contents)
		(skip-null (map (lambda (exp)
											(if (definition? exp)
												(list 'set!
															(definition-variable exp)
															(definition-value exp))
												'()))
										contents)))
	(define (body contents)
		(filter (lambda (exp) (not (definition? exp))) contents))
	(let ((vars (local-vars contents)))
		(if (> (length vars) 0)
			(list (append vars (init-vars contents) (body contents)))
			(body contents))))
