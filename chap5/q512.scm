(load "./chap5/regsim.scm")

(define (make-new-machine)
	(let ((pc (make-register 'pc))
				(flag (make-register 'flag))
				(stack (make-stack))
				(the-instruction-sequence '())
				(analyzer (make-analyzer)))
		(let ((the-ops
						(list (list 'initialize-stack
												(lambda () (stack 'initialize)))
									(list 'print-stack-statistics
												(lambda () (stack 'print-statistics)))))
					(register-table
						(list (list 'pc pc) (list 'flag flag))))
			(define (allocate-register name)
				(if (assoc name register-table)
					(error "Multiply defined register: " name)
					(set! register-table
						(cons (list name (make-register name))
									register-table)))
				'register-allocated)
			(define (lookup-register name)
				(let ((val (assoc name register-table)))
					(if val
						(cadr val)
						(error "Unknown register:" name))))
			(define (execute)
				(let ((insts (get-contents pc)))
					(if (null? insts)
						'done
						(begin
							((instruction-execution-proc (car insts)))
							(execute)))))
			(define (dispatch message)
				(cond ((eq? message 'start)
							 (set-contents! pc the-instruction-sequence)
							 (execute))
							((eq? message 'install-instruction-sequence)
							 (lambda (seq) (set! the-instruction-sequence seq)))
							((eq? message 'allocate-register) allocate-register)
							((eq? message 'get-register) lookup-register)
							((eq? message 'install-operations)
							 (lambda (ops) (set! the-ops (append the-ops ops))))
							((eq? message 'stack) stack)
							((eq? message 'operations) the-ops)
							((eq? message 'analyzer) analyzer)
							((eq? message 'print-analytics) (analyzer 'print))
							(else (error "Unknown request -- MACHINE" message))))
			dispatch)))

(define (make-analyzer)
	(let ((analyze-list
					'((assign) (test) (branch) (goto) (save) (restore) (perform))))
		(define (add inst command)
			(set-cdr! (assoc command analyze-list)
								(cons inst (cdr (assoc command analyze-list)))))
		(define (dispatch message)
			(cond ((eq? message 'add) add)
						((eq? message 'print) (display analyze-list))
						(else (error "Unknown request -- ANALYZER" message))))
		dispatch))

(define (add-analyzer machine inst command)
	(((machine 'analyzer) 'add) inst command))

(define (make-execution-procedure inst labels machine
																	pc flag stack ops)
	(cond ((eq? (car inst) 'assign)
				 (add-analyzer machine inst 'assign)
				 (make-assign inst machine labels ops pc))
				((eq? (car inst) 'test)
				 (add-analyzer machine inst 'test)
				 (make-test inst machine labels ops flag pc))
				((eq? (car inst) 'branch)
				 (add-analyzer machine inst 'branch)
				 (make-branch inst machine labels flag pc))
				((eq? (car inst) 'goto)
				 (add-analyzer machine inst 'goto)
				 (make-goto inst machine labels pc))
				((eq? (car inst) 'save)
				 (add-analyzer machine inst 'save)
				 (make-save inst machine stack pc))
				((eq? (car inst) 'restore)
				 (add-analyzer machine inst 'restore)
				 (make-restore inst machine stack pc))
				((eq? (car inst) 'perform)
				 (add-analyzer machine inst 'perform)
				 (make-perform inst machine labels ops pc))
				(else (error "Unknown instruction type -- ASSEMBLE"
										 inst))))
