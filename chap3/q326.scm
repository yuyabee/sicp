; (key value left right)
(define (make-table)
	(let ((local-table '*table*))
		(define (key-tree tree) (car tree))
		(define (value-tree tree) (cadr tree))
		(define (left-tree tree) (caddr tree))
		(define (right-tree tree) (cadddr tree))
		(define (make-tree key value left right)
			(list key value left right))

		(define (lookup key)
			(define (iter key tree)
				(cond ((= key (key-tree tree)) (value-tree tree))
							((< key (key-tree tree))
							 (iter key (left-tree tree)))
							((> key (key-tree tree))
							 (iter key (right-tree tree)))))
			(iter key local-table))

		(define (set-value-tree! tree value)
			(set-car! (cdr tree) value))
		(define (set-left-branch-tree! tree left)
			(set-car! (cddr tree) left))
		(define (set-right-branch-tree! tree right)
			(set-car! (cdddr tree) right))

		(define (insert! key value)
			(define (make-branch key value)
				(make-tree key value '() '()))
			(define (iter key value tree)
				(cond ((eq? tree '*table*)
							 (set! local-table (make-branch key value)))
							((= key (key-tree tree))
							 (set-value-tree! tree value))
							((< key (key-tree tree))
							 (if (null? (left-branch tree))
								 (set-left-branch-tree! tree (make-branch key value))
								 (iter key value (left-branch tree))))
							((> key (key-tree tree))
							 (if (null? (right-branch tree))
								 (set-right-branch-tree! tree (make-branch key value))
								 (iter key value (right-branch tree))))))
			(iter key value local-table)
			'ok)

		(define (dispatch m)
			(cond ((eq? m 'lookup) lookup)
						((eq? m 'insert!) insert!)
						(else (error "Unknown method" m))))
		dispatch))
