(load "./chap3/parallel.scm")

(define (make-semaphore n)
	(let ((counter n)
				(mutex (make-mutex)))
		(define (acquire)
			(mutex 'acquire)
			(if (= counter 0)
				(begin (mutex 'release)
							 (acquire))
				(begin (set! counter (- counter 1))
							 (mutex 'release))))
		(define (release)
			(mutex 'acquire)
			(set! counter (+ counter 1))
			(mutex 'release))
		(define (dispatch m)
			(cond ((eq? m 'acquire) acquire)
						((eq? m 'release) release)))
		dispatch))

(define (make-semaphore n)
	(let ((counter n)
				(cell (list #f)))
		(define (acquire)
			(if (or (= counter 0) (test-and-set! cell))
				(acquire)
				(begin
					(set! counter (- counter 1))
					(clear! cell))))
		(define (release)
			(set! counter (- counter 1))
			(clear! cell))
		(define (dispatch m)
			(cond ((eq? m 'acquire) acquire)
						((eq? m 'release) release)))
		dispatch))
